#include <string>
#include <sstream>
#include "targets/type_checker.h"
#include "targets/postfix_writer.h"
#include "targets/frame_size_calculator.h"
#include "ast/all.h"  // all.h is automatically generated

//---------------------------------------------------------------------------

void m19::postfix_writer::do_nil_node(cdk::nil_node * const node, int lvl) {
  // EMPTY
}
void m19::postfix_writer::do_data_node(cdk::data_node * const node, int lvl) {
  // EMPTY
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_sequence_node(cdk::sequence_node * const node, int lvl) {
    for (size_t i = 0; i < node->size(); i++) {
        node->node(i)->accept(this, lvl);
    }
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_integer_node(cdk::integer_node * const node, int lvl) {
  if (_inFunctionBody) 
      _pf.INT(node->value());
  else
      _pf.SINT(node->value());
}

void m19::postfix_writer::do_double_node(cdk::double_node * const node, int lvl) {
    if (_inFunctionBody) 
        _pf.DOUBLE(node->value());
    else
        _pf.SDOUBLE(node->value());
}

void m19::postfix_writer::do_string_node(cdk::string_node * const node, int lvl) {
    int lbl1;

    _pf.RODATA(); // strings are DATA readonly
    _pf.ALIGN();
    _pf.LABEL(mklbl(lbl1 = ++_lbl)); // give the string a name
    _pf.SSTRING(node->value()); // output string characters

    if (_function) {
        _pf.TEXT();
        _pf.ADDR(mklbl(lbl1));      
    } else {
        _pf.DATA();
        _pf.SADDR(mklbl(lbl1));
    }
  
  /* leave the address on the stack 
  _pf.TEXT(); // return to the TEXT segment
  _pf.ADDR(mklbl(lbl1)); // the string to be printed*/
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_neg_node(cdk::neg_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  node->argument()->accept(this, lvl); // determine the vablock instructionlue
  _pf.NEG(); // 2-complement
}

//---------------------------------------------------------------------------
void m19::postfix_writer::do_identity_node(m19::identity_node *const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->argument()->accept(this, lvl);    
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_add_node(cdk::add_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->left()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
    else if (node->type()->name() == basic_type::TYPE_POINTER && node->left()->type()->name() == basic_type::TYPE_INT) {
        _pf.INT(3);
        _pf.SHTL();
    }
    
    node->right()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
    else if (node->type()->name() == basic_type::TYPE_POINTER && node->right()->type()->name() == basic_type::TYPE_INT) {
        _pf.INT(3);
        _pf.SHTL();
    }
    
    if (node->type()->name() == basic_type::TYPE_DOUBLE){
        std::cout << "SOMA DOUBLE " << std::endl;
        _pf.DADD();
    }
    else
        _pf.ADD();
}

void m19::postfix_writer::do_sub_node(cdk::sub_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->left()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
    else if (node->type()->name() == basic_type::TYPE_POINTER && node->left()->type()->name() == basic_type::TYPE_INT) {
        _pf.INT(3);
        _pf.SHTL();
    }
    
    node->right()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
    else if (node->type()->name() == basic_type::TYPE_POINTER && node->right()->type()->name() == basic_type::TYPE_INT) {
        _pf.INT(3);
        _pf.SHTL();
    }
    
    if (node->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.DSUB();
    else
        _pf.SUB();
}

void m19::postfix_writer::do_mul_node(cdk::mul_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->left()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
        
    if (node->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.DMUL();
    else
        _pf.MUL();
}

void m19::postfix_writer::do_div_node(cdk::div_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->left()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_INT)
        _pf.I2D();
        
    if (node->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.DDIV();
    else
        _pf.DIV();
}

void m19::postfix_writer::do_mod_node(cdk::mod_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  node->left()->accept(this, lvl);
  node->right()->accept(this, lvl);
  _pf.MOD();
}

void m19::postfix_writer::do_lt_node(cdk::lt_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->right()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    _pf.LT();
}

void m19::postfix_writer::do_le_node(cdk::le_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->right()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    _pf.LE();
}

void m19::postfix_writer::do_ge_node(cdk::ge_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->right()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    _pf.GE();
}

void m19::postfix_writer::do_gt_node(cdk::gt_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->right()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    _pf.GT();
}

void m19::postfix_writer::do_ne_node(cdk::ne_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->right()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    _pf.NE();
}

void m19::postfix_writer::do_eq_node(cdk::eq_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->left()->accept(this, lvl);
    if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    node->right()->accept(this, lvl);
    if (node->right()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.I2D();
        
    _pf.EQ();
}


void m19::postfix_writer::do_and_node(cdk::and_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    
    int lbl = ++_lbl;
    node->left()->accept(this, lvl + 2);
    _pf.DUP32();
    _pf.JZ(mklbl(lbl));
    node->right()->accept(this, lvl + 2);
    _pf.AND();
    _pf.ALIGN();
    _pf.LABEL(mklbl(lbl));
}

void m19::postfix_writer::do_or_node(cdk::or_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    
    int lbl = ++_lbl;
    node->left()->accept(this, lvl + 2);
    _pf.DUP32();
    _pf.JNZ(mklbl(lbl));
    node->right()->accept(this, lvl + 2);
    _pf.OR();
    _pf.ALIGN();
    _pf.LABEL(mklbl(lbl));
}

void m19::postfix_writer::do_not_node(cdk::not_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    
    node->argument()->accept(this, lvl + 2);
    _pf.INT(0);
    _pf.EQ();
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_variable_node(cdk::variable_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
        
    std::string id = node->name();
    std::shared_ptr<m19::symbol> symbol;
    
    
    if(id == "@")
        symbol = _symtab.find("@" + _function->name());
    else
        symbol = _symtab.find(id);
    
    
    if (symbol->isGlobal()) {
        _pf.ADDR(symbol->name());
    }
    else {
        _pf.LOCAL(symbol->offset());
    }
}

void m19::postfix_writer::do_rvalue_node(cdk::rvalue_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  node->lvalue()->accept(this, lvl);
  if (node->type()->name() == basic_type::TYPE_DOUBLE)
      _pf.LDDOUBLE();
  else
    _pf.LDINT();
}

void m19::postfix_writer::do_assignment_node(cdk::assignment_node * const node, int lvl) {
    std::cout << "ASSIGNMENT NODE POSTFIX " << std::endl;
  ASSERT_SAFE_EXPRESSIONS;
  node->rvalue()->accept(this, lvl);
  if (node->type()->name() == basic_type::TYPE_DOUBLE){
      if (node->rvalue()->type()->name() == basic_type::TYPE_INT) 
          _pf.I2D();
      _pf.DUP64();
  } else
    _pf.DUP32();
  
  node->lvalue()->accept(this, lvl);
  if (node->type()->name() == basic_type::TYPE_DOUBLE)
      _pf.STDOUBLE();
  else 
    _pf.STINT();
}


//---------------------------------------------------------------------------

void m19::postfix_writer::do_evaluation_node(m19::evaluation_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    
    node->argument()->accept(this, lvl); // determine the value
    basic_type *type = node->argument()->type();
    
    std::cout << "trash : " << node->argument()->type()->size() << std::endl;
    
    _pf.TRASH(type->size());
}

void m19::postfix_writer::do_print_node(m19::print_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  node->argument()->accept(this, lvl); // determine the value to print
  if (node->argument()->type()->name() == basic_type::TYPE_INT) {
    _functions_to_declare.insert("printi");
    _pf.CALL("printi");
    _pf.TRASH(4); // delete the printed value
    
  } else if (node->argument()->type()->name() == basic_type::TYPE_DOUBLE) {
    _functions_to_declare.insert("printd");
    _pf.CALL("printd");
    _pf.TRASH(8); // delete the printed value
    
  } else if (node->argument()->type()->name() == basic_type::TYPE_STRING) {
    _functions_to_declare.insert("prints");
    _pf.CALL("prints");
    _pf.TRASH(4); // delete the printed value's address
  } else {
    std::cerr << "ERROR: CANNOT HAPPEN!" << std::endl;
    exit(1);
  }
  
  if(node->newLine()){
    _functions_to_declare.insert("println");
    _pf.CALL("println"); // print a newline
      
  }
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_read_node(m19::read_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  _pf.EXTERN("readi");
  _pf.CALL("readi");
  _pf.LDFVAL32();
  _pf.STINT();
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_for_node(m19::for_node * const node, int lvl) {
    _symtab.push();

    _forCondit.push(++_lbl);
    _forIncr.push(++_lbl);
    _forEnd.push(++_lbl);

    //_inForInit = true; //rember this for local declarations

    //initialize
    if(node->init())
        node->init()->accept(this, lvl + 2);

    ASSERT_SAFE_EXPRESSIONS;

    //test
    _pf.ALIGN();
    _pf.LABEL(mklbl(_forCondit.top()));
    if(node->condition())
        node->condition()->accept(this, lvl + 2);
    _pf.JZ(mklbl(_forEnd.top()));
    
    _symtab.push();
    node->block()->accept(this, lvl + 2);
    _symtab.pop();

    _pf.ALIGN();
    _pf.LABEL(mklbl(_forIncr.top()));
    
    if(node->inc())
        node->inc()->accept(this, lvl + 2);
    
    _pf.JMP(mklbl(_forCondit.top()));
    _pf.ALIGN();
    _pf.LABEL(mklbl(_forEnd.top()));

    //_inForInit = false;

    _forCondit.pop();
    _forIncr.pop();
    _forEnd.pop();

    _symtab.pop();
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_if_node(m19::if_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    int lbl1;
    node->condition()->accept(this, lvl);
    _pf.JZ(mklbl(lbl1 = ++_lbl));
    node->block()->accept(this, lvl + 2); //not a m19:block_node but a cdk::basic_node
    _pf.LABEL(mklbl(lbl1));
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_if_else_node(m19::if_else_node * const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    int lbl1, lbl2;
    node->condition()->accept(this, lvl);
    _pf.JZ(mklbl(lbl1 = ++_lbl));
    node->thenblock()->accept(this, lvl + 2);
    _pf.JMP(mklbl(lbl2 = ++_lbl));
    _pf.LABEL(mklbl(lbl1));
    if(node->elseblock())
        node->elseblock()->accept(this, lvl + 2);
    _pf.LABEL(mklbl(lbl1 = lbl2));
}

//---------------------------------------------------------------------------
void m19::postfix_writer::do_function_declaration_node(m19::function_declaration_node *const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    if(!new_symbol()) return;
    
    std::shared_ptr<m19::symbol> function = new_symbol();
    _functions_to_declare.insert(function->name());
    reset_new_symbol();
    
}

void m19::postfix_writer::do_function_definition_node(m19::function_definition_node *const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;

    _function = new_symbol();
    _functions_to_declare.erase(_function->name());
    reset_new_symbol();
    _offset = 8;
    
    _symtab.push(); //scope of args
    if(node->arguments()){
        _inFunctionArgs = true;
        for(size_t i=0; i<node->arguments()->size(); i++){
            cdk::basic_node *arg = node->arguments()->node(i);
            if(arg == nullptr) break;
            arg->accept(this, 0);
        }
        _inFunctionArgs = false;
    }

    // generate the main function (RTS mandates that its name be "_main")
    _pf.TEXT();
    _pf.ALIGN();
    if(node->qualifier() == 0)
        _pf.GLOBAL(_function->name(), _pf.FUNC());
    _pf.LABEL(_function->name());
    
    //chamar o frame_size_calculator para saber a memoria a reservar para as variaveis locais
    frame_size_calculator fsc(_compiler, _symtab);
    node->accept(&fsc, lvl);
    _pf.ENTER(fsc.localsize()); //total stack size reserved for local variables and return value
    
    _inFunctionBody = true;
    _offset = -_function->type()->size();
        
    //store default return value
    if(_function->init()){
        node->literal()->accept(this, lvl);
        std::shared_ptr<m19::symbol> returnSymbol = _symtab.find("@" + _function->name());
        returnSymbol->offset(_offset);

        if(node->literal()->type()->name() == basic_type::TYPE_INT) {
            if (returnSymbol->type()->name() == basic_type::TYPE_INT) {
                _pf.LOCAL(returnSymbol->offset());
                _pf.STINT();
                
            } else if (returnSymbol->type()->name() == basic_type::TYPE_DOUBLE) {
                _pf.I2D();
                _pf.LOCAL(returnSymbol->offset());
                _pf.STDOUBLE();
            }
        }
        if(node->literal()->type()->name() == basic_type::TYPE_STRING || node->literal()->type()->name() == basic_type::TYPE_POINTER){
            _pf.LOCAL(returnSymbol->offset());
            _pf.STINT();
            
        } else if(node->literal()->type()->name() == basic_type::TYPE_DOUBLE){
            _pf.LOCAL(returnSymbol->offset());
            _pf.STDOUBLE();
            
        }
    }
    else if(!_function->init() && node->type()->name() != basic_type::TYPE_VOID){
        std::shared_ptr<m19::symbol> returnSymbol = _symtab.find("@" + _function->name());
        returnSymbol->offset(_offset);
    }
    
    node->body()->accept(this, lvl + 4);
    
    if(node->type()->name() != basic_type::TYPE_VOID){
        std::shared_ptr<m19::symbol> returnSymbol = _symtab.find("@" + _function->name());
        
        std::cout << "return Symbol " << returnSymbol->name() << std::endl;
        std::cout << "return Symbol offset " << returnSymbol->offset() << std::endl;

        if(returnSymbol->type()->name() == basic_type::TYPE_INT || returnSymbol->type()->name() == basic_type::TYPE_STRING || returnSymbol->type()->name() == basic_type::TYPE_POINTER){
            _pf.LOCAL(returnSymbol->offset());
            _pf.LDINT();
            _pf.STFVAL32();
            
        } else if(returnSymbol->type()->name() == basic_type::TYPE_DOUBLE){
            _pf.LOCAL(returnSymbol->offset());
            _pf.LDDOUBLE();
            _pf.STFVAL64();
        }
    }
    
    _inFunctionBody = false;
    _symtab.pop();
    _pf.LEAVE();
    _pf.RET();
    
    if(node->identifier() == "m19"){
        for(std::string s: _functions_to_declare)
            _pf.EXTERN(s);
    }
}

void m19::postfix_writer::do_function_call_node(m19::function_call_node *const node, int lvl) {
    if(node->identifier() == "@") node->identifier(_function->name());
    
    ASSERT_SAFE_EXPRESSIONS;
    
    size_t argsSize = 0;
    if (node->arguments()) {
        for (int i = node->arguments()->size(); i > 0; i--) {
            cdk::expression_node *arg = dynamic_cast<cdk::expression_node*>(node->arguments()->node(i - 1));
            arg->accept(this, lvl + 2);
            argsSize += arg->type()->size();
        }
    }

    _pf.CALL(node->identifier());
    
    if (argsSize != 0)
        _pf.TRASH(argsSize);

    std::shared_ptr<m19::symbol> symbol = _symtab.find(node->identifier());

    basic_type *type = symbol->type();
    if (type->name() == basic_type::TYPE_INT || type->name() == basic_type::TYPE_POINTER || type->name() == basic_type::TYPE_STRING )
        _pf.LDFVAL32();
    else if (type->name() == basic_type::TYPE_DOUBLE) 
        _pf.LDFVAL64();
    else {/* cannot happer!*/}
    
}

//---------------------------------------------------------------------------
void m19::postfix_writer::do_body_node(m19::body_node *const node, int lvl) {
    if(node->initial()) node->initial()->accept(this, lvl);

    if(node->sections()) node->sections()->accept(this, lvl);
    
    _pf.ALIGN();
    _pf.LABEL("finalSection" + _function->name());
    if(node->fin()) node->fin()->accept(this, lvl);
}

void m19::postfix_writer::do_initial_section_node(m19::initial_section_node *const node, int lvl) {
    node->block()->accept(this, lvl + 2);
}

void m19::postfix_writer::do_section_node(m19::section_node *const node, int lvl) {
    int lbl1;
    if(node->expression()){
        node->expression()->accept(this, lvl + 2);
        _pf.JZ(mklbl(lbl1 = ++_lbl));
        _symtab.push();
        node->block()->accept(this, lvl);
        _symtab.pop();
        if(node->type() == 0)
           _pf.JMP("finalSection" + _function->name());
        _pf.ALIGN();
        _pf.LABEL(mklbl(lbl1));

    }else{
        _symtab.push();
        node->block()->accept(this, lvl + 2);
        _symtab.pop();
        if(node->type() == 0)
            _pf.JMP("finalSection" + _function->name());
    }
}

void m19::postfix_writer::do_final_section_node(m19::final_section_node *const node, int lvl) {
    _inFinalSection = true;
    _symtab.push();
    node->block()->accept(this, lvl + 2);
    _symtab.pop();
}

void m19::postfix_writer::do_block_node(m19::block_node *const node, int lvl) {
    if(node->declaration()) node->declaration()->accept(this, lvl + 2);
    if(node->instruction()) node->instruction()->accept(this, lvl + 2);
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_alloc_node(m19::alloc_node *const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->size()->accept(this, lvl);
    _pf.INT(3);
    _pf.SHTL();
    _pf.ALLOC();
    _pf.SP();
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_address_node(m19::address_node *const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    node->lvalue()->accept(this, lvl + 2);
}


//---------------------------------------------------------------------------
void m19::postfix_writer::do_index_node(m19::index_node *const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;
    
    if (node->pointer())
        node->pointer()->accept(this, lvl);
    else {
        if (_function)
            _pf.LOCV(-_function->type()->size());
        else std::cerr << "FATAL : " << node->lineno() << ": trying to use return value outside function" << std::endl;
    }
    node->index()->accept(this, lvl);
    _pf.INT(3);
    _pf.SHTL();
    _pf.ADD();
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_return_node(m19::return_node *const node, int lvl) {
    // NOT SURE
    ASSERT_SAFE_EXPRESSIONS;
    if(!_inFinalSection)
        _pf.JMP("finalSection" + _function->name());
    if(_inFinalSection){
        if (_function->type()->name() != basic_type::TYPE_VOID) {
            if (_function->type()->name() == basic_type::TYPE_INT || _function->type()->name() == basic_type::TYPE_STRING || _function->type()->name() == basic_type::TYPE_POINTER)
                _pf.STFVAL32();
            else if (_function->type()->name() == basic_type::TYPE_DOUBLE)
                _pf.STFVAL64();
            else std::cerr << node->lineno() << ": should not happen: unknown return type" << std::endl;
        }
        _inFinalSection = false;
        _pf.LEAVE();
        _pf.RET();
    }
}

//---------------------------------------------------------------------------

void m19::postfix_writer::do_continue_node(m19::continue_node *const node, int lvl) {
    if (_forCondit.size() != 0)
        _pf.JMP(mklbl(_forIncr.top()));
    else
        std::cerr << "error: " << node->lineno() << ": " << "'restart' outside 'for'" << std::endl;
}


void m19::postfix_writer::do_break_node(m19::break_node * const node, int lvl) {
    if (_forCondit.size() != 0)
        _pf.JMP(mklbl(_forEnd.top()));
    else
        std::cerr << "error: " << node->lineno() << ": " << "'break' outside 'for'" << std::endl;
}


//---------------------------------------------------------------------------


void m19::postfix_writer::do_variable_declaration_node(m19::variable_declaration_node *const node, int lvl) {
    ASSERT_SAFE_EXPRESSIONS;

    auto id = node->identifier();
    int offset = 0, typeSize = node->type()->size();

    if (_inFunctionBody) {
        _offset -= typeSize;
        offset = _offset;
    } else if (_inFunctionArgs) {
        offset = _offset;
        _offset += typeSize;

    } else offset = 0;
 
    std::shared_ptr<m19::symbol> symbol = new_symbol();
    if (symbol) {
        symbol->offset(offset);
        reset_new_symbol();
    }
 
    if (_inFunctionBody) {
        if (node->init()) {
            node->init()->accept(this, lvl);
            if (node->type()->name() == basic_type::TYPE_INT || node->type()->name() == basic_type::TYPE_STRING || node->type()->name() == basic_type::TYPE_POINTER) {
                _pf.LOCAL(symbol->offset());
                _pf.STINT();
             } else if (node->type()->name() == basic_type::TYPE_DOUBLE) {
                _pf.LOCAL(symbol->offset());
                _pf.STDOUBLE();
             } else std::cerr << "cannot initialize" << std::endl;
         }
     } else {
         if (!_function) {
             if (node->init() == nullptr) {

                 _pf.BSS();
                 _pf.ALIGN();
                 _pf.GLOBAL(id, _pf.OBJ());
                 _pf.LABEL(id);
                 _pf.SALLOC(typeSize);
             } else {
                 if (node->type()->name() == basic_type::TYPE_INT || node->type()->name() == basic_type::TYPE_DOUBLE || node->type()->name() == basic_type::TYPE_POINTER) {
                     _pf.DATA();
                     _pf.ALIGN();
                     _pf.GLOBAL(id, _pf.OBJ());
                     _pf.LABEL(id);
 
                     if (node->type()->name() == basic_type::TYPE_INT) {
                         node->init()->accept(this, lvl);
                     }
                     else if (node->type()->name() == basic_type::TYPE_POINTER)
                         node->init()->accept(this, lvl);
                     else if (node->type()->name() == basic_type::TYPE_DOUBLE) {
                         if (node->init()->type()->name() == basic_type::TYPE_DOUBLE)
                             node->init()->accept(this, lvl);
                         else if (node->init()->type()->name() == basic_type::TYPE_INT) {
                             cdk::integer_node *i = dynamic_cast<cdk::integer_node *>(node->init());
                             cdk::double_node d(i->lineno(), i->value());
                             d.accept(this, lvl);
                         } else std::cerr << node->lineno() << ": '" << id << "' has bad bad initializer for real value\n";
                     } 
                 } else if (node->type()->name() == basic_type::TYPE_STRING) {
                         _pf.DATA();
                         _pf.ALIGN();
                         _pf.GLOBAL(id, _pf.OBJ());
                         _pf.LABEL(id);
                         node->init()->accept(this, lvl);
                 } else std::cerr << node->lineno() << ": '" << id << "' has unexpected initializer\n";
             }
         }
     }
 
 }




