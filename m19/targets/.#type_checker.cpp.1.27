#include <string>
#include "targets/type_checker.h"
#include "ast/all.h"  // automatically generated

#define ASSERT_UNSPEC \
    { if (node->type() != nullptr && \
          node->type()->name() != basic_type::TYPE_UNSPEC) return; }

//---------------------------------------------------------------------------

void m19::type_checker::do_sequence_node(cdk::sequence_node * const node, int lvl) {
    for(size_t i = 0; i < node->size(); i++)
        node->node(i)->accept(this, lvl);
}

//---------------------------------------------------------------------------

void m19::type_checker::do_nil_node(cdk::nil_node * const node, int lvl) {
  // EMPTY
}
void m19::type_checker::do_data_node(cdk::data_node * const node, int lvl) {
  // EMPTY
}

//---------------------------------------------------------------------------
void m19::type_checker::do_double_node(cdk::double_node * const node, int lvl) {
    ASSERT_UNSPEC;
    node->type(new basic_type(4, basic_type::TYPE_DOUBLE));
}

void m19::type_checker::do_integer_node(cdk::integer_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(new basic_type(4, basic_type::TYPE_INT));
}

void m19::type_checker::do_string_node(cdk::string_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(new basic_type(4, basic_type::TYPE_STRING));
}

//---------------------------------------------------------------------------

void m19::type_checker::processUnaryExpression(cdk::unary_expression_node * const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
  if (node->argument()->type()->name() == basic_type::TYPE_INT)
      node->type(new basic_type(4, basic_type::TYPE_INT));
  else if(node->argument()->type()->name() == basic_type::TYPE_DOUBLE)
      node->type(new basic_type(4, basic_type::TYPE_DOUBLE));
  else
      throw std::string("wrong type in argument of unary expression");
}


void m19::type_checker::processBinaryExpression(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);
  
  if (node->left()->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
    node->type(new basic_type(8, basic_type::TYPE_DOUBLE));
  else if (node->left()->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_INT)
    node->type(new basic_type(8, basic_type::TYPE_DOUBLE));
  else if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
    node->type(new basic_type(8, basic_type::TYPE_DOUBLE));
  else if (node->left()->type()->name() == basic_type::TYPE_POINTER && node->right()->type()->name() == basic_type::TYPE_INT)
    node->type(new basic_type(4, basic_type::TYPE_POINTER));
  else if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_POINTER)
    node->type(new basic_type(4, basic_type::TYPE_POINTER));
  else if (node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_INT)
    node->type(new basic_type(4, basic_type::TYPE_INT));
  else if (node->left()->type()->name() == basic_type::TYPE_UNSPEC && node->right()->type()->name() == basic_type::TYPE_UNSPEC) {
    node->type(new basic_type(4, basic_type::TYPE_INT));
    node->left()->type(new basic_type(4, basic_type::TYPE_INT));
    node->right()->type(new basic_type(4, basic_type::TYPE_INT));
  } else
    throw std::string("wrong types in binary expression");
}

void m19::type_checker::processMultExpression(cdk::binary_expression_node * const node, int lvl) {
    ASSERT_UNSPEC;
    node->left()->accept(this, lvl + 2);
    if(node->left()->type()->name() != basic_type::TYPE_INT) throw std::string("wrong type in left argument of binary expression");

    node->right()->accept(this, lvl + 2);
    if (node->right()->type()->name() != basic_type::TYPE_INT) throw std::string("wrong type in right argument of binary expression");
    
    if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_INT)
        node->type(new basic_type(4, basic_type::TYPE_INT));
    else if(node->left()->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        node->type(new basic_type(8, basic_type::TYPE_DOUBLE));
    else if(node->left()->type()->name() == basic_type::TYPE_DOUBLE && node->right()->type()->name() == basic_type::TYPE_INT)
        node->type(new basic_type(8, basic_type::TYPE_DOUBLE));
    else if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE)
        node->type(new basic_type(8, basic_type::TYPE_DOUBLE));
    else if(node->left()->type()->name() == basic_type::TYPE_UNSPEC && node->right()->type()->name() == basic_type::TYPE_UNSPEC){
        node->type(new basic_type(4, basic_type::TYPE_INT));
        node->left()->type(new basic_type(4, basic_type::TYPE_INT));
        node->right()->type(new basic_type(4, basic_type::TYPE_INT));
    } else{
        throw std::string("wrong types in multiplicative expression");
    }
}

void m19::type_checker::processModExpression(cdk::binary_expression_node * const node, int lvl) {
    ASSERT_UNSPEC;
    node->left()->accept(this, lvl + 2);
    if(node->left()->type()->name() != basic_type::TYPE_INT) throw std::string("wrong type in left argument of binary expression");

    node->right()->accept(this, lvl + 2);
    if (node->right()->type()->name() != basic_type::TYPE_INT) throw std::string("wrong type in right argument of binary expression");
    
    node->type(new basic_type(4, basic_type::TYPE_INT));
}

void m19::type_checker::do_CompareExpression(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);

  node->type(new basic_type(4, basic_type::TYPE_INT));
}


void m19::type_checker::do_EqualExpression(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);
  if (node->left()->type()->name() != node->right()->type()->name()) throw std::string(
      "same type expected on both sides of equality operator");
  node->type(new basic_type(4, basic_type::TYPE_INT));
}


void m19::type_checker::do_BooleanLogicalExpression(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  if (node->left()->type()->name() != basic_type::TYPE_INT) throw std::string("integer expression expected in binary expression");

  node->right()->accept(this, lvl + 2);
  if (node->right()->type()->name() != basic_type::TYPE_INT) throw std::string("integer expression expected in binary expression");

  node->type(new basic_type(4, basic_type::TYPE_INT));
}

//---------------------------------------------------------------------------

void m19::type_checker::do_add_node(cdk::add_node * const node, int lvl) {
    processBinaryExpression(node, lvl);
}
void m19::type_checker::do_sub_node(cdk::sub_node * const node, int lvl) {
    processBinaryExpression(node, lvl);
}

void m19::type_checker::do_mul_node(cdk::mul_node * const node, int lvl) {
    processMultExpression(node, lvl);
}

void m19::type_checker::do_div_node(cdk::div_node * const node, int lvl) {
    processMultExpression(node, lvl);
}

void m19::type_checker::do_mod_node(cdk::mod_node * const node, int lvl) {
    processModExpression(node, lvl);
}


void m19::type_checker::do_neg_node(cdk::neg_node * const node, int lvl) {
    processUnaryExpression(node, lvl);
}

void m19::type_checker::do_identity_node(m19::identity_node *const node, int lvl) {
    processUnaryExpression(node, lvl);
}

void m19::type_checker::do_not_node(cdk::not_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->argument()->accept(this, lvl + 2);
  if (node->argument()->type()->name() == basic_type::TYPE_INT)
    node->type(new basic_type(4, basic_type::TYPE_INT));
  else if (node->argument()->type()->name() == basic_type::TYPE_UNSPEC) {
    node->type(new basic_type(4, basic_type::TYPE_INT));
    node->argument()->type(new basic_type(4, basic_type::TYPE_INT));
  } else
    throw std::string("wrong type in not logical expression");
}


void m19::type_checker::do_and_node(cdk::and_node * const node, int lvl) {
  do_BooleanLogicalExpression(node, lvl);
}

void m19::type_checker::do_or_node(cdk::or_node * const node, int lvl) {
  do_BooleanLogicalExpression(node, lvl);
}

void m19::type_checker::do_lt_node(cdk::lt_node * const node, int lvl) {
  do_CompareExpression(node, lvl);
}
void m19::type_checker::do_le_node(cdk::le_node * const node, int lvl) {
  do_CompareExpression(node, lvl);
}
void m19::type_checker::do_ge_node(cdk::ge_node * const node, int lvl) {
  do_CompareExpression(node, lvl);
}
void m19::type_checker::do_gt_node(cdk::gt_node * const node, int lvl) {
  do_CompareExpression(node, lvl);
}

void m19::type_checker::do_ne_node(cdk::ne_node * const node, int lvl) {
  do_EqualExpression(node, lvl);
}
void m19::type_checker::do_eq_node(cdk::eq_node * const node, int lvl) {
  do_EqualExpression(node, lvl);
}

//---------------------------------------------------------------------------

void m19::type_checker::do_variable_node(cdk::variable_node * const node, int lvl) {
  ASSERT_UNSPEC;
  const std::string &id = node->name();
  std::shared_ptr<m19::symbol> symbol = _symtab.find(id);

  if (symbol != nullptr) {
    node->type(symbol->type());
  } else {
    throw id;
  }
}

void m19::type_checker::do_rvalue_node(cdk::rvalue_node * const node, int lvl) {
  ASSERT_UNSPEC;
  try {
    node->lvalue()->accept(this, lvl);
    node->type(node->lvalue()->type());
  } catch (const std::string &id) {
    throw "undeclared variable '" + id + "'";
  }
}

void m19::type_checker::do_assignment_node(cdk::assignment_node * const node, int lvl) {
  ASSERT_UNSPEC;

  /*try {
    node->lvalue()->accept(this, lvl);
  } catch (const std::string &id) {
    std::shared_ptr<m19::symbol> symbol = std::make_shared<m19::symbol>(new basic_type(4, basic_type::TYPE_INT), id, 0);
    _symtab.insert(id, symbol);
    _parent->set_new_symbol(symbol);  // advise parent that a symbol has been inserted
    node->lvalue()->accept(this, lvl);  //DAVID: bah!
  }

  if (node->lvalue()->type()->name() != basic_type::TYPE_INT) throw std::string(
      "wrong type in left argument of assignment expression");

  node->rvalue()->accept(this, lvl + 2);
  if (node->rvalue()->type()->name() != basic_type::TYPE_INT) throw std::string(
      "wrong type in right argument of assignment expression");

  // in Simple, expressions are always int
  node->type(new basic_type(4, basic_type::TYPE_INT));*/
}

//---------------------------------------------------------------------------

void m19::type_checker::do_evaluation_node(m19::evaluation_node * const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
}

void m19::type_checker::do_print_node(m19::print_node * const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
}

//---------------------------------------------------------------------------

void m19::type_checker::do_read_node(m19::read_node * const node, int lvl) {
    

  /*try {
    node->argument()->accept(this, lvl);
  } catch (const std::string &id) {
    throw "undeclared variable '" + id + "'";
  }*/
}

//---------------------------------------------------------------------------

void m19::type_checker::do_for_node(m19::for_node * const node, int lvl) {
    /*ASSERT_UNSPEC;
    node->init()->accept(this, lvl);
    for(size_t i = 0; i < node->init()->size(); i++){
        if(node->init(i)->type()->name() != basic_type::TYPE_INT)
            throw std::string("expected integer initalization");
    }
    node->condition()->accept(this, lvl);
    for(size_t i = 0; i < node->condition()->size(); i++){
        if(node->condition(i)->type()->name() != basic_type::TYPE_INT)
            throw std::string("expected integer condition");
    }
    node->inc()->accept(this, lvl);
    for(size_t i = 0; i < node->inc()->size(); i++){
        if(node->inc(i)->type()->name() != basic_type::TYPE_INT)
            throw std::string("expected integer incremet");
    }*/
}

//---------------------------------------------------------------------------

void m19::type_checker::do_if_node(m19::if_node * const node, int lvl) {
    node->condition()->accept(this, lvl + 4);
    if(node->condition()->type()->name() != basic_type::TYPE_INT) throw std::string("expected integer condition");
}

void m19::type_checker::do_if_else_node(m19::if_else_node * const node, int lvl) {
    node->condition()->accept(this, lvl + 4);
    if(node->condition()->type()->name() != basic_type::TYPE_INT) throw std::string("expected integer condition");
}


//---------------------------------------------------------------------------
void m19::type_checker::do_body_node(m19::body_node *const node, int lvl) {
  // EMPTY
}

//---------------------------------------------------------------------------
void m19::type_checker::do_initial_section_node(m19::initial_section_node *const node, int lvl) {
  // EMPTY
}

void m19::type_checker::do_section_node(m19::section_node *const node, int lvl) {
  // EMPTY
}

void m19::type_checker::do_final_section_node(m19::final_section_node *const node, int lvl) {
  // EMPTY
}


//---------------------------------------------------------------------------
void m19::type_checker::do_block_node(m19::block_node *const node, int lvl) {
  // EMPTY
}

//---------------------------------------------------------------------------

void m19::type_checker::do_alloc_node(m19::alloc_node *const node, int lvl) {
  // EMPTY
}

//---------------------------------------------------------------------------

void m19::type_checker::do_address_node(m19::address_node *const node, int lvl) {
      ASSERT_UNSPEC;
}


//---------------------------------------------------------------------------

void m19::type_checker::do_index_node(m19::index_node *const node, int lvl) {
  // EMPTY
}



//---------------------------------------------------------------------------
void m19::type_checker::do_return_node(m19::return_node *const node, int lvl) {
  // EMPTY
}

//---------------------------------------------------------------------------
void m19::type_checker::do_continue_node(m19::continue_node *const node, int lvl) {
  // EMPTY
}

//---------------------------------------------------------------------------
void m19::type_checker::do_break_node(m19::break_node * const node, int lvl) {
    // EMPTY
}



//---------------------------------------------------------------------------
void m19::type_checker::do_variable_declaration_node(m19::variable_declaration_node *const node, int lvl) {
    
    if (node->init() != nullptr) {
        node->init()->accept(this, lvl);
        if (node->type()->name() == basic_type::TYPE_INT){
            if (node->init()->type()->name() != basic_type::TYPE_INT) throw std::string("wrong type, integer expected");
        } else if (node->type()->name() == basic_type::TYPE_DOUBLE){
            if (node->init()->type()->name() != basic_type::TYPE_DOUBLE) throw std::string("wrong type, double expected");
        } else if (node->type()->name() == basic_type::TYPE_STRING){
            if (node->init()->type()->name() != basic_type::TYPE_STRING) throw std::string("wrong type, string expected");
        } else if (node->type()->name() == basic_type::TYPE_POINTER){
            if (node->init()->type()->name() != basic_type::TYPE_POINTER) throw std::string("wrong type, pointer expected");
        } else {
            throw std::string("unknown type");
        }
    }
    const std::string &id = node->identifier();
    std::shared_ptr<m19::symbol> symbol = std::make_shared<m19::symbol> (node->type(), id, node->qualifier(), (bool)node->init(), false, false);
    
    if (!_symtab.insert(id, symbol))
        throw std::string("variable '" + id + "' redeclared");
    _parent->set_new_symbol(symbol);
}

//---------------------------------------------------------------------------

void m19::type_checker::do_function_declaration_node(m19::function_declaration_node *const node, int lvl) {
    
    std::string id;
    
    if (node->identifier() == "m19") id = "_main";
    else if (node->identifier() == "_main") id = "._main";
    else id = node->identifier();
    
    std::shared_ptr<m19::symbol> function = std::make_shared<m19::symbol> (node->type(), id, node->qualifier(), false, true, true);
    std::shared_ptr<m19::symbol> previous = _symtab.find(function->name());
    
    if (previous){
        if (false) throw std::string("conflict");
        
    } else{
        _symtab.insert(function->name(), function);
        _parent->set_new_symbol(function);
    }
    
}

void m19::type_checker::do_function_definition_node(m19::function_definition_node *const node, int lvl) {

    std::string id;
    
    if (node->identifier() == "m19") id = "_main";
    else if (node->identifier() == "_main") id = "._main";
    else id = node->identifier();
    
    std::shared_ptr<m19::symbol> function = std::make_shared<m19::symbol> (node->type(), id, node->qualifier(), false, true);
    function->offset(-node->type()->size());
    
    std::shared_ptr<m19::symbol> previous = _symtab.find(function->name());
    
    if (previous){
        if (previous->forward() && previous->qualifier() == node->qualifier()){
          _symtab.replace(function->name(), function);
          _parent->set_new_symbol(function);
        } else throw std::string("conflict definition for '" + function->name() + "'");
    } else {
        _symtab.insert(function->name(), function);
        _parent->set_new_symbol(function);
    }
}

void m19::type_checker::do_function_call_node(m19::function_call_node *const node, int lvl) {
    ASSERT_UNSPEC;
    const std::string &id = node->identifier();
    std::shared_ptr<m19::symbol> symbol = _symtab.find(id);
    
    if (symbol == nullptr) std::string("symbol '" + id + "' undeclared");
    
    if (!symbol->isFunction()) std::string("symbol '" + id + "' is not a function");
    
    node->type(symbol->type());
    if (node->arguments()) node->arguments()->accept(this, lvl+4);
}



